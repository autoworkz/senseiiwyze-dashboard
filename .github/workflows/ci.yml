name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  pnpm-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check for forbidden lock files
        run: |
          if [ -f "package-lock.json" ]; then
            echo "‚ùå package-lock.json detected! This project requires pnpm."
            exit 1
          fi
          if [ -f "yarn.lock" ]; then
            echo "‚ùå yarn.lock detected! This project requires pnpm."
            exit 1
          fi
          echo "‚úÖ No forbidden lock files found"

      - name: Check script permissions
        run: |
          # Check if scripts/dev.sh exists and is executable
          if [ -f "scripts/dev.sh" ]; then
            if [ -x "scripts/dev.sh" ]; then
              echo "‚úÖ scripts/dev.sh is executable"
            else
              echo "‚ùå scripts/dev.sh is not executable! Run: chmod +x scripts/dev.sh"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è  scripts/dev.sh not found"
          fi

  test:
    runs-on: ubuntu-latest
    needs: pnpm-check

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js (Linux)
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          architecture: "x64"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0

      - name: Clean previous builds and lock files
        run: |
          echo "üßπ Cleaning previous builds and platform-specific files..."
          rm -rf node_modules || true
          rm -f pnpm-lock.yaml || true
          rm -f package-lock.json || true
          rm -f yarn.lock || true
          rm -rf .next || true
          rm -rf dist || true
          rm -rf build || true
          echo "‚úÖ Cleanup completed"

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache (Linux-specific)
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: linux-x64-pnpm-store-${{ hashFiles('**/package.json') }}-${{ runner.os }}-${{ runner.arch }}
          restore-keys: |
            linux-x64-pnpm-store-${{ hashFiles('**/package.json') }}-
            linux-x64-pnpm-store-

      - name: Install dependencies (fresh for Linux)
        run: |
          echo "üì¶ Installing dependencies fresh for Linux environment..."
          pnpm install --no-frozen-lockfile --prefer-offline=false --ignore-platform-errors
          echo "‚úÖ Dependencies installed successfully"

      - name: Run type checking
        run: pnpm run typecheck
        continue-on-error: true

      - name: Run linting
        run: pnpm run lint
        continue-on-error: true

      - name: Run tests
        run: pnpm run test
        continue-on-error: true

      - name: Build project
        run: pnpm run build
        continue-on-error: true

      - name: CI Summary
        run: |
          echo "‚úÖ CI pipeline completed - all steps attempted"
          echo "üîç Auto-fix workflow will now analyze any errors detected"
