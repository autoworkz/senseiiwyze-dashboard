-- Create the better_auth schema
CREATE SCHEMA IF NOT EXISTS better_auth;

-- Grant permissions to the postgres user (adjust based on your setup)
GRANT ALL ON SCHEMA better_auth TO postgres;

GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA better_auth TO postgres;

GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA better_auth TO postgres;

-- Enable UUID extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create the Better Auth tables
-- These will be generated by the Better Auth CLI, but here's the basic structure:

-- User table
CREATE TABLE IF NOT EXISTS better_auth.user (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    email_verified BOOLEAN NOT NULL DEFAULT FALSE,
    image TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);

-- Session table
CREATE TABLE IF NOT EXISTS better_auth.session (
    id TEXT PRIMARY KEY,
    expires_at TIMESTAMP NOT NULL,
    token TEXT NOT NULL UNIQUE,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    ip_address TEXT,
    user_agent TEXT,
    user_id TEXT NOT NULL REFERENCES better_auth.user (id) ON DELETE CASCADE,
    active_organization_id TEXT
);

-- Account table
CREATE TABLE IF NOT EXISTS better_auth.account (
    id TEXT PRIMARY KEY,
    account_id TEXT NOT NULL,
    provider_id TEXT NOT NULL,
    user_id TEXT NOT NULL REFERENCES better_auth.user (id) ON DELETE CASCADE,
    access_token TEXT,
    refresh_token TEXT,
    id_token TEXT,
    access_token_expires_at TIMESTAMP,
    refresh_token_expires_at TIMESTAMP,
    scope TEXT,
    password TEXT,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL
);

-- Verification table
CREATE TABLE IF NOT EXISTS better_auth.verification (
    id TEXT PRIMARY KEY,
    identifier TEXT NOT NULL,
    value TEXT NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Organization table
CREATE TABLE IF NOT EXISTS better_auth.organization (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    slug TEXT UNIQUE,
    logo TEXT,
    created_at TIMESTAMP NOT NULL,
    metadata TEXT
);

-- Member table
CREATE TABLE IF NOT EXISTS better_auth.member (
    id TEXT PRIMARY KEY,
    organization_id TEXT NOT NULL REFERENCES better_auth.organization (id) ON DELETE CASCADE,
    user_id TEXT NOT NULL REFERENCES better_auth.user (id) ON DELETE CASCADE,
    role TEXT NOT NULL DEFAULT 'member',
    created_at TIMESTAMP NOT NULL
);

-- Invitation table
CREATE TABLE IF NOT EXISTS better_auth.invitation (
    id TEXT PRIMARY KEY,
    organization_id TEXT NOT NULL REFERENCES better_auth.organization (id) ON DELETE CASCADE,
    email TEXT NOT NULL,
    role TEXT,
    status TEXT NOT NULL DEFAULT 'pending',
    expires_at TIMESTAMP NOT NULL,
    inviter_id TEXT NOT NULL REFERENCES better_auth.user (id) ON DELETE CASCADE
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_session_user_id ON better_auth.session (user_id);

CREATE INDEX IF NOT EXISTS idx_session_token ON better_auth.session (token);

CREATE INDEX IF NOT EXISTS idx_account_user_id ON better_auth.account (user_id);

CREATE INDEX IF NOT EXISTS idx_verification_identifier ON better_auth.verification (identifier);

CREATE INDEX IF NOT EXISTS idx_member_organization_id ON better_auth.member (organization_id);

CREATE INDEX IF NOT EXISTS idx_member_user_id ON better_auth.member (user_id);

CREATE INDEX IF NOT EXISTS idx_invitation_organization_id ON better_auth.invitation (organization_id);

CREATE INDEX IF NOT EXISTS idx_invitation_email ON better_auth.invitation (email);